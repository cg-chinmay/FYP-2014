
LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
 
-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--USE ieee.numeric_std.ALL;
 
ENTITY regtst IS
END regtst;
 
ARCHITECTURE behavior OF regtst IS 
 
    -- Component Declaration for the Unit Under Test (UUT)
 
    COMPONENT regbank
    PORT(
         clk : IN  std_logic;
         reset : IN  std_logic;
         wr_en : IN  std_logic;
         w_addr : IN  std_logic_vector(3 downto 0);
         r_addr1 : IN  std_logic_vector(3 downto 0);
         r_addr2 : IN  std_logic_vector(3 downto 0);
         w_data : IN  std_logic_vector(15 downto 0);
         r_data1 : OUT  std_logic_vector(15 downto 0);
         r_data2 : OUT  std_logic_vector(15 downto 0);
         pcin : IN  std_logic_vector(15 downto 0);
         stack_in : IN  std_logic_vector(6 downto 0);
         link_in : IN  std_logic_vector(15 downto 0);
         r0 : OUT  std_logic_vector(15 downto 0);
         r1 : OUT  std_logic_vector(15 downto 0);
         r2 : OUT  std_logic_vector(15 downto 0);
         r3 : OUT  std_logic_vector(15 downto 0);
         r4 : OUT  std_logic_vector(15 downto 0);
         r5 : OUT  std_logic_vector(15 downto 0);
         r_addr3 : IN  std_logic_vector(3 downto 0);
         r_data3 : OUT  std_logic_vector(15 downto 0)
        );
    END COMPONENT;
    

   --Inputs
   signal clk : std_logic := '0';
   signal reset : std_logic := '0';
   signal wr_en : std_logic := '0';
   signal w_addr : std_logic_vector(3 downto 0) := (others => '0');
   signal r_addr1 : std_logic_vector(3 downto 0) := (others => '0');
   signal r_addr2 : std_logic_vector(3 downto 0) := (others => '0');
   signal w_data : std_logic_vector(15 downto 0) := (others => '0');
   signal pcin : std_logic_vector(15 downto 0) := (others => '0');
   signal stack_in : std_logic_vector(6 downto 0) := (others => '0');
   signal link_in : std_logic_vector(15 downto 0) := (others => '0');
   signal r_addr3 : std_logic_vector(3 downto 0) := (others => '0');

 	--Outputs
   signal r_data1 : std_logic_vector(15 downto 0);
   signal r_data2 : std_logic_vector(15 downto 0);
   signal r0 : std_logic_vector(15 downto 0);
   signal r1 : std_logic_vector(15 downto 0);
   signal r2 : std_logic_vector(15 downto 0);
   signal r3 : std_logic_vector(15 downto 0);
   signal r4 : std_logic_vector(15 downto 0);
   signal r5 : std_logic_vector(15 downto 0);
   signal r_data3 : std_logic_vector(15 downto 0);

   -- Clock period definitions
   constant clk_period : time := 10 ns;
 
BEGIN
 
	-- Instantiate the Unit Under Test (UUT)
   uut: regbank PORT MAP (
          clk => clk,
          reset => reset,
          wr_en => wr_en,
          w_addr => w_addr,
          r_addr1 => r_addr1,
          r_addr2 => r_addr2,
          w_data => w_data,
          r_data1 => r_data1,
          r_data2 => r_data2,
          pcin => pcin,
          stack_in => stack_in,
          link_in => link_in,
          r0 => r0,
          r1 => r1,
          r2 => r2,
          r3 => r3,
          r4 => r4,
          r5 => r5,
          r_addr3 => r_addr3,
          r_data3 => r_data3
        );

   -- Clock process definitions
   clk_process :process
   begin
		clk <= '0';
		wait for clk_period/2;
		clk <= '1';
		wait for clk_period/2;
   end process;
 

   -- Stimulus process
   stim_proc: process
   begin		
      -- hold reset state for 100 ns.
      wait for 100 ns;	
		reset<='1';
		wait for 100 ns;
		reset<='0';
		r_addr1<="0001";
		r_addr2<="0010";
		w_addr<="0011";
		w_data<=X"FF00";
		wr_en<='1';
		wait for 100 ns;
		reset<='0';
		r_addr1<="1111";
		pcin<=X"00F0";
		r_addr2<="0100";
		w_addr<="0100";
		w_data<=X"00FF";
		wr_en<='1';
		wait for 100 ns;
		reset<='1';


      -- insert stimulus here 

      wait;
   end process;

END;
